#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include "../include/define.h"
#include "../include/block.h"
#include "../include/global.h"


int game_start(void)
{ 
     static struct sigaction sa;
     static struct itimerval timer;
     time_t ptime; 
     struct tm *t; 
     FILE *fp = NULL; 
  
     if(game == GAME_START) 
     { 
         init_tetris_table(); 
  
         /* Install timer_handler as the signal handler for SIGVTALRM. */
         memset(&sa, 0, sizeof (sa));
         sa.sa_handler = &refresh; 
         sigaction(SIGVTALRM, &sa, NULL);
  
         /* Configure the timer to expire after 250 msec... */
         timer.it_value.tv_sec = 0; 
         timer.it_value.tv_usec = 1; 
  
         /* ... and every 250 msec after that. */
         timer.it_interval.tv_sec = 0; 
         timer.it_interval.tv_usec = 1; 
  
         /* Start a virtual timer. It counts down whenever this process is executing. */
         setitimer(ITIMER_VIRTUAL, &timer, NULL);
 
         /* Do busy work.  */ 
  
         while(1) 
         { 
             if(game == GAME_END) 
             { 
  
                 timer.it_value.tv_sec = 0;
                 timer.it_value.tv_usec = 0;
                 timer.it_interval.tv_sec = 0;
                 timer.it_interval.tv_usec = 0;
                 setitimer(ITIMER_VIRTUAL,&timer,NULL); 
  
  
                 // 기록 파일로 저장 
  
                 printf("\n\n 최종 득점 : %ld ", point); 
                 printf("\n\n 이름을 입력 하세요 : "); 
                 scanf("%s%*c", temp_result.name); 
                 temp_result.point = point; 
  
                 if(temp_result.point >= best_point) 
                     best_point = temp_result.point; 
  
  
                 ptime = time(NULL); // 현재 시각을 초 단위로 얻기 
                 t = localtime(&ptime); // 초 단위의 시간을 분리하여 구조체에 넣기 
  
                 temp_result.year = t->tm_year + 1900; 
                 temp_result.month = t->tm_mon + 1; 
                 temp_result.day = t->tm_mday; 
                 temp_result.hour = t->tm_hour; 
                 temp_result.min = t->tm_min; 
  
                 fp = fopen("result", "ab"); 
                 fseek(fp, 1, SEEK_END); 
                 fwrite(&temp_result, sizeof(struct result), 1, fp); 
                 fclose(fp); 
  
                 x = 3, y =0; 
                 point = 0; 
  
                 return 1;
             } 
         } 
     } 
  
   return 0;
 } 
/* 테트리스 판을 2차원 배열로 표현
 * 양옆 2줄과 맨 아래 한줄은 벽
 * 따라서  20*8 이
 * 실제 테트로미노 블록들이
 * 움직이고 놓이는 공간이됨*/
char tetris_table[21][10];

/* 게임 종료때 마다
 * 이름과 득점점수와
 * 날짜, 시간이저장되는 구조체
 * */
static struct result
{
	char name[30];
	long point;
	int year;
	int month;
	int day;
	int hour;
	int min;
	int rank;
}temp_result;

int print_result(void)
{
	FILE *fp = NULL;
	char ch = 1 ;

	fp = fopen("result", "rb");

	if(fp == NULL)
		return 0;

	system("clear");

	printf("\n\t\t\t\tText Tetris");
	printf("\n\t\t\t\t 게임 기록\n\n");
	printf("\n\t\t이름\t\t점수\t   날짜\t\t 시간");

	while(1)
	{
			fread(&temp_result, sizeof(struct result), 1, fp);
			if(!feof(fp))
			{
				printf("\n\t========================================================");
				printf("\n\t\t%s\n\t\t\t\t%ld\t %d. %d. %d.  |  %d : %d\n", temp_result.name, temp_result.point, temp_result.year, temp_result.month, temp_result.day, temp_result.hour, temp_result.min);
			}
			else
			{
				break;
			}
	}

	fclose(fp);

	printf("\n\n\t게임 메뉴로 돌아가기 : M");
	while(1)
	{
		ch = getch();
		if(ch == 77 || ch == 109)
			break;
	}
	return 0;

}

int drop(void)
{
	while(!collision_test(DOWN))
		move_block(DOWN);

	return 0;
}
int collision_test(int command)
{
	int i, j;
	int tempx, tempy;
	int oldx, oldy;
	int temp_block_state;
	char (*block_pointer)[4][4][4];
	char temp_tetris_table[21][10];

	oldx = tempx = x;
	oldy = tempy = y;
	temp_block_state = block_state;

	switch(command)
	{
		case	LEFT :	tempx--;
									break;
		case	RIGHT :	tempx++;
									break;
		case	DOWN :	tempy++;
									break;
		case ROTATE : temp_block_state++;
									temp_block_state %=  4;
									break;
	}

	switch(block_number)
	{
		case I_BLOCK :	block_pointer = &i_block;
								  	break;
		case T_BLOCK :	block_pointer = &t_block;
										break;
		case S_BLOCK :  block_pointer = &s_block;
										break;
		case Z_BLOCK : 	block_pointer = &z_block;
										break;
		case L_BLOCK : 	block_pointer = &l_block;
										break;
		case J_BLOCK : 	block_pointer = &j_block;
										break;
		case O_BLOCK :	block_pointer = &o_block;
										break;
	}

	for(i = 0 ; i < 21 ; i++)
	{
		for(j = 0 ; j < 10 ; j++)
		{
			temp_tetris_table[i][j] = tetris_table[i][j];
		}
	}

	for(i = 0, oldy = y ; i < 4 ; i++, oldy++)
	{
		for(j = 0, oldx = x ; j < 4 ; j++, oldx++)
		{
			if(oldx > 0 && oldx < 9 && oldy < 20 && oldy > 0)
			{
				if((*block_pointer)[block_state][i][j] == 1)
						temp_tetris_table[oldy][oldx] = 0;
			}
		}
	}

	for(i = 0 ; i < 4 ; i++)
	{
		for(j = 0 ; j < 4 ; j++)
		{

			if(temp_tetris_table[tempy+i][tempx+j] == 1 && (*block_pointer)[temp_block_state][i][j] == 1)
					return 1;
		}
	}

	return 0;
}
int check_one_line(void)
{
	int i, j;
	int ti, tj;
	int line_hole;

	for(i = 19 ; i > 0 ; i--)
	{
		line_hole = 0;
		for(j = 1 ; j < 9 ; j++)
		{
			if(tetris_table[i][j] == 0)
			{
				line_hole = 1;
			}
		}

		if(line_hole == 0)
		{
			point += 1000;
			for(ti = i ; ti > 0 ; ti--)
			{
				for(tj = 0 ; tj < 9 ; tj++)
				{
					tetris_table[ti][tj] = tetris_table[ti-1][tj];
				}
			}
		}
	}

	return 0;
}
int move_block(int command)
{
	int i, j;
	int newx, newy;
	int oldx, oldy;
	int old_block_state;
	char (*block_pointer)[4][4][4] = NULL;

	newx = x;
	newy = y;

	old_block_state = block_state;

	if(collision_test(command) == 0)
	{
		switch(command)
		{
			case	LEFT :	newx--;
										break;
			case	RIGHT :	newx++;
										break;
			case	DOWN :	newy++;
										break;
			case ROTATE :	block_state++;
										block_state %= 4;
										break;
		}
	}
	else
	{
		return 1;
	}

	switch(block_number)
	{
		case I_BLOCK :	block_pointer = &i_block;
								  	break;
		case T_BLOCK :	block_pointer = &t_block;
										break;
		case S_BLOCK :  block_pointer = &s_block;
										break;
		case Z_BLOCK : 	block_pointer = &z_block;
										break;
		case L_BLOCK : 	block_pointer = &l_block;
										break;
		case J_BLOCK : 	block_pointer = &j_block;
										break;
		case O_BLOCK :	block_pointer = &o_block;
										break;
	}

	for(i = 0, oldy = y ; i < 4 ; i++, oldy++)
	{
		for(j = 0, oldx = x ; j < 4 ; j++, oldx++)
		{
			if(oldx > 0 && oldx < 9 && oldy < 20 && oldy > 0)
				if((*block_pointer)[old_block_state][i][j] == 1)
						tetris_table[oldy][oldx] = 0;

		}
	}

	x = newx;
	y = newy;

	for(i = 0, newy = y ; i < 4 ; i++, newy++)
	{
		for(j = 0, newx = x ; j < 4 ; j++, newx++)
		{
			if(newx > 0 && newx < 9 && newy < 20 && newy > 0)
				if((*block_pointer)[block_state][i][j] == 1)
					tetris_table[newy][newx] = (*block_pointer)[block_state][i][j];
		}
	}

	return 0;
}
int display_menu(void)
{
	int menu = 0;

	while(1)
	{
		system("clear");
		printf("\n\n\t\t\t\tText Tetris");
		printf("\n\t\t\t============================");
		printf("\n\t\t\t\t게 임 메 뉴\t\n");
		printf("\n\t\t\t============================");
		printf("\n\t\t\t=\t1) 게임 시작\t   =");
		printf("\n\t\t\t=\t2) 기록 검색\t   =");
		printf("\n\t\t\t=\t3) 기록 출력\t   =");
		printf("\n\t\t\t=\t4) 종료\t\t   =");
		printf("\n\t\t\t============================");
		printf("\n\t\t\t\t\t 선택 : ");
		scanf("%d",&menu);
		if(menu < 1 || menu > 4)
		{
			continue;
		}
		else
		{
			return menu;
		}
	}
	return 0;
}

int display_tetris_table(void)
{
	int i, j;
	char (*block_pointer)[4][4][4] = NULL;

	switch(next_block_number)
	{
		case I_BLOCK :	block_pointer = &i_block;
								  	break;
		case T_BLOCK :	block_pointer = &t_block;
										break;
		case S_BLOCK :  block_pointer = &s_block;
										break;
		case Z_BLOCK : 	block_pointer = &z_block;
										break;
		case L_BLOCK : 	block_pointer = &l_block;
										break;
		case J_BLOCK : 	block_pointer = &j_block;
										break;
		case O_BLOCK :	block_pointer = &o_block;
										break;
	}

	system("clear");


	printf("\n\n Next Block\n");

	for(i = 0 ; i < 4 ; i++)
	{
		printf("\n ");
		for(j = 0 ; j < 4 ; j++)
		{
			if((*block_pointer)[0][i][j] == 1)
				printf("#");
			else if((*block_pointer)[0][i][j] == 0)
				printf(" ");
		}
	}

	for(i = 2 ; i < 21 ; i++)
	{
		printf("\t");
		for(j = 0 ; j < 10 ; j++)
		{
			if(j == 0 || j == 9|| (i == 20 && (j > 1 || j < 9)))
			{
				printf("@");
			}
			else if(tetris_table[i][j] == 1)
				printf("#");
			else if(tetris_table[i][j] == 0)
				printf(" ");
		}
		printf("\n");
	}

	return 0;
}
